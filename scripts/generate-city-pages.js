#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// List of Swedish cities to generate pages for
const cities = [
  { slug: 'uppsala', name: 'Uppsala', area: 'Uppsalaomr√•det' },
  { slug: 'linkoping', name: 'Link√∂ping', area: 'Link√∂pingsomr√•det' },
  { slug: 'orebro', name: '√ñrebro', area: '√ñrebroomr√•det' },
  { slug: 'vasteras', name: 'V√§ster√•s', area: 'V√§ster√•somr√•det' },
  { slug: 'helsingborg', name: 'Helsingborg', area: 'Helsingborgsomr√•det' },
  { slug: 'j√∂nk√∂ping', name: 'J√∂nk√∂ping', area: 'J√∂nk√∂pingsomr√•det' },
  { slug: 'norrk√∂ping', name: 'Norrk√∂ping', area: 'Norrk√∂pingsomr√•det' },
  { slug: 'lund', name: 'Lund', area: 'Lundomr√•det' },
  { slug: 'umea', name: 'Ume√•', area: 'Ume√•omr√•det' },
  { slug: 'gavle', name: 'G√§vle', area: 'G√§vleomr√•det' },
  { slug: 'boras', name: 'Bor√•s', area: 'Bor√•somr√•det' },
  { slug: 'sodertalje', name: 'S√∂dert√§lje', area: 'S√∂dert√§ljeomr√•det' },
  { slug: 'eskilstuna', name: 'Eskilstuna', area: 'Eskilstunaomr√•det' },
  { slug: 'halmstad', name: 'Halmstad', area: 'Halmstadsomr√•det' },
  { slug: 'vaxjo', name: 'V√§xj√∂', area: 'V√§xj√∂omr√•det' },
  { slug: 'karlstad', name: 'Karlstad', area: 'Karlstadsomr√•det' },
  { slug: 'sundsvall', name: 'Sundsvall', area: 'Sundsvallomr√•det' },
  { slug: 'orebro', name: '√ñrebro', area: '√ñrebroomr√•det' },
  { slug: 'trollhattan', name: 'Trollh√§ttan', area: 'Trollh√§ttanomr√•det' },
  { slug: 'lulea', name: 'Lule√•', area: 'Lule√•omr√•det' }
];

// Read the current cityData from the page
const pagePath = path.join(__dirname, '../src/app/[slug]/page.tsx');
let pageContent = fs.readFileSync(pagePath, 'utf8');

// Extract current cityData
const cityDataMatch = pageContent.match(/const cityData = \{([\s\S]*?)\};/);
if (!cityDataMatch) {
  console.error('Could not find cityData in page.tsx');
  process.exit(1);
}

// Generate new cityData with all cities
let newCityData = 'const cityData = {\n';
cities.forEach((city, index) => {
  newCityData += `  '${city.slug}': {\n`;
  newCityData += `    name: '${city.name}',\n`;
  newCityData += `    title: 'Tryck eget i ${city.name} - T-shirt med eget tryck | Tryckeget',\n`;
  newCityData += `    description: 'Best√§ll tryckta kl√§der i ${city.name}! Vi levererar t-shirt med eget tryck, hoodie med eget tryck och keps med eget tryck direkt till din d√∂rr. Snabb leverans inom 5-7 dagar.',\n`;
  newCityData += `    keywords: 'tryck eget ${city.name.toLowerCase()}, t-shirt med eget tryck ${city.name.toLowerCase()}, tryck p√• kl√§der ${city.name.toLowerCase()}, anpassade kl√§der ${city.name.toLowerCase()}, print on demand ${city.name.toLowerCase()}',\n`;
  newCityData += `    deliveryTime: '5-7 dagar',\n`;
  newCityData += `    area: '${city.area}'\n`;
  newCityData += `  }${index < cities.length - 1 ? ',' : ''}\n`;
});
newCityData += '};';

// Replace cityData in the page
const updatedPageContent = pageContent.replace(
  /const cityData = \{[\s\S]*?\};/,
  newCityData
);

// Write the updated page
fs.writeFileSync(pagePath, updatedPageContent);

console.log(`‚úÖ Generated ${cities.length} city landing pages:`);
cities.forEach(city => {
  console.log(`   - /${city.slug} (${city.name})`);
});

console.log('\nüìù Next steps:');
console.log('1. Update sitemap.ts to include all new cities');
console.log('2. Test the pages: npm run dev');
console.log('3. Deploy to production for SEO benefits');
